# GitHub Actions Workflow: Terraform Deploy
# Automates Terraform format, validate, plan, apply, and security/cost checks for EKS GitOps infrastructure

name: "Terraform Deploy"

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  terraform-staging:
    name: "Terraform Staging"
    runs-on: ubuntu-latest
    environment: staging
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: us-east-1

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init -backend-config=staging.backend.tfvars

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -input=false -out=plan.out

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

      - name: Run tfsec (Terraform Security Scan)
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          soft_fail: false

      - name: Run Checkov (Terraform Security Scan)
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          quiet: true

      - name: Run infracost (Cost Estimation)
        uses: infracost/infracost-gh-action@v2
        with:
          path: plan.out
          terraform_plan_flags: "-input=false"
        env:
          INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}

      - name: Upload Terraform Plan (PR only)
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: plan.out

  terraform-production:
    name: "Terraform Production"
    runs-on: ubuntu-latest
    environment: production
    needs: terraform-staging
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-east-1

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init -backend-config=production.backend.tfvars

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -input=false -out=plan.out

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

      - name: Run tfsec (Terraform Security Scan)
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          soft_fail: false

      - name: Run Checkov (Terraform Security Scan)
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          quiet: true

      - name: Run infracost (Cost Estimation)
        uses: infracost/infracost-gh-action@v2
        with:
          path: plan.out
          terraform_plan_flags: "-input=false"
        env:
          INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}

      - name: Upload Terraform Plan (PR only)
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: plan.out

# Notes:
# - Store AWS credentials as GitHub Secrets: AWS_ACCESS_KEY_ID_STAGING, AWS_SECRET_ACCESS_KEY_STAGING, AWS_ACCESS_KEY_ID_PROD, AWS_SECRET_ACCESS_KEY_PROD
# - Store Infracost API key as INFRACOST_API_KEY secret
# - Add additional jobs for more environments as needed
# - Add drift detection and PR comment automation as next steps
