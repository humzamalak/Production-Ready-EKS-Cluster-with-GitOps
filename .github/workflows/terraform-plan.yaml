name: Terraform Plan

on:
  pull_request:
    branches: [main]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-plan.yaml'

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.5.0'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Format Check
        id: fmt
        run: |
          cd terraform
          terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: |
          cd terraform/environments/aws
          terraform init

      - name: Terraform Validate
        id: validate
        run: |
          cd terraform/environments/aws
          terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: |
          cd terraform/environments/aws
          terraform plan -no-color -out=tfplan
        continue-on-error: true

      - name: Comment PR with Plan
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  policy-check:
    name: Terraform Policy Check
    runs-on: ubuntu-latest
    needs: terraform-plan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.5.0'

      - name: Check IAM Policies
        run: |
          echo "Checking IAM policies..."
          find terraform/modules/iam -name "*.tf" -exec grep -l "aws_iam_" {} \; | while read file; do
            echo "Checking IAM resources in $file"
            # Add specific IAM policy checks here
          done

      - name: Check S3 Bucket Policies
        run: |
          echo "Checking S3 bucket configurations..."
          find terraform -name "*.tf" -exec grep -l "aws_s3_bucket" {} \; | while read file; do
            echo "Checking S3 configuration in $file"
            # Ensure versioning and encryption are enabled
            grep -q "versioning" "$file" || echo "‚ö†Ô∏è $file: Missing versioning configuration"
            grep -q "server_side_encryption_configuration" "$file" || echo "‚ö†Ô∏è $file: Missing encryption configuration"
          done

