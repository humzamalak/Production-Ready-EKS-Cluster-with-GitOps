# =============================================================================
# ArgoCD Helm Chart Values - Production-Ready Configuration (Updated)
# =============================================================================

global:
  domain: argocd.example.com
  image:
    tag: "v2.12.3"

# =============================================================================
# ArgoCD Server Configuration
# =============================================================================
server:
  replicas: 2
  service:
    type: LoadBalancer
  ingress:
    enabled: false    # Set to true in production with valid TLS secret
    ingressClassName: nginx
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      nginx.ingress.kubernetes.io/rate-limit: "100"
      nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    hosts:
      - argocd.example.com
    tls:
      - secretName: argocd-tls
        hosts:
          - argocd.example.com
  resources:
    requests:
      cpu: 250m
      memory: 512Mi
    limits:
      cpu: 500m
      memory: 1Gi
  config:
    server.insecure: false
    rbacConfig:
      policy.default: role:readonly
      policy.csv: |
        p, role:admin, applications, *, */*, allow
        p, role:admin, clusters, *, *, allow
        p, role:admin, repositories, *, *, allow
        g, argocd-admins, role:admin
    repositories:
      - type: git
        url: https://github.com/humzamalak/Production-Ready-EKS-Cluster-with-GitOps
        name: production-repo

# Commented out OIDC to prevent crashes if unused
# oidc.config: |
#   name: OIDC
#   issuer: https://your-oidc-provider.com
#   clientId: argocd
#   clientSecret: $oidc.clientSecret
#   requestedScopes: ["openid", "profile", "email", "groups"]
#   requestedIDTokenClaims: {"groups": {"essential": true}}

# =============================================================================
# Controller Configuration
# =============================================================================
controller:
  replicas: 2
  resources:
    requests:
      cpu: 250m
      memory: 512Mi
    limits:
      cpu: 500m
      memory: 1Gi
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

# =============================================================================
# Repository Server Configuration
# =============================================================================
repoServer:
  replicas: 2
  resources:
    requests:
      cpu: 250m
      memory: 512Mi
    limits:
      cpu: 500m
      memory: 1Gi
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

# =============================================================================
# ApplicationSet Controller
# =============================================================================
applicationSet:
  enabled: true
  replicas: 2
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 256Mi

# =============================================================================
# Optional Components
# =============================================================================
dex:
  enabled: false

notifications:
  enabled: false

# =============================================================================
# Redis Configuration
# =============================================================================
redis:
  enabled: true
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 256Mi
  auth:
    enabled: true
    password: ""  # auto-generated if empty

# =============================================================================
# Secret Configuration
# =============================================================================
configs:
  secret:
    createSecret: true  # Ensure argocd-secret is created

# =============================================================================
# Service Account
# =============================================================================
serviceAccount:
  create: true

# =============================================================================
# Network Policy
# =============================================================================
networkPolicy:
  enabled: true
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
      ports:
        - protocol: TCP
          port: 80
        - protocol: TCP
          port: 443

# =============================================================================
# Pod & Container Security
# =============================================================================
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 999
  fsGroup: 999
  seccompProfile:
    type: RuntimeDefault

containerSecurityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 999
  seccompProfile:
    type: RuntimeDefault

# =================================================
