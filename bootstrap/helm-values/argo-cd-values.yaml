# ArgoCD Helm Chart Values
# Production-ready configuration for ArgoCD deployment

global:
  domain: argocd.example.com
  image:
    tag: "v2.8.4"  # Pin to stable version

# ArgoCD Server Configuration
server:
  replicas: 2
  service:
    type: LoadBalancer
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      nginx.ingress.kubernetes.io/rate-limit: "100"
      nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    hosts:
      - argocd.example.com
    tls:
      - secretName: argocd-tls
        hosts:
          - argocd.example.com
  resources:
    requests:
      cpu: 250m
      memory: 512Mi
    limits:
      cpu: 500m
      memory: 1Gi
  config:
    # Disable insecure mode in production
    server.insecure: false
    # Enable RBAC
    rbacConfig:
      policy.default: role:readonly
      policy.csv: |
        p, role:admin, applications, *, */*, allow
        p, role:admin, clusters, *, *, allow
        p, role:admin, repositories, *, *, allow
        g, argocd-admins, role:admin
    # Configure repository credentials
    repositories:
      - type: git
        url: https://github.com/humzamalak/Production-Ready-EKS-Cluster-with-GitOps
        name: production-repo
    # Configure OIDC (optional - for production)
    oidc.config: |
      name: OIDC
      issuer: https://your-oidc-provider.com
      clientId: argocd
      clientSecret: $oidc.clientSecret
      requestedScopes: ["openid", "profile", "email", "groups"]
      requestedIDTokenClaims: {"groups": {"essential": true}}

# ArgoCD Controller Configuration
controller:
  replicas: 2
  resources:
    requests:
      cpu: 250m
      memory: 512Mi
    limits:
      cpu: 500m
      memory: 1Gi
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

# ArgoCD Repository Server Configuration
repoServer:
  replicas: 2
  resources:
    requests:
      cpu: 250m
      memory: 512Mi
    limits:
      cpu: 500m
      memory: 1Gi
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

# ArgoCD ApplicationSet Controller
applicationSet:
  enabled: true
  replicas: 2
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 256Mi

# Disable components not needed for basic setup
dex:
  enabled: false

notifications:
  enabled: false

# Redis Configuration
redis:
  enabled: true
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 256Mi
  # Redis authentication configuration
  auth:
    enabled: true
    password: ""  # Will be auto-generated if empty

# Security Configuration
configs:
  secret:
    # In production, set these via external secret management
    argocdServerAdminPassword: "$2a$10$rRyBsGSHK6.uc8fntPwFyO4LQnV7sY8dZ8b4Z8b4Z8b4Z8b4Z8b4Z8"
    argocdServerAdminPasswordMtime: "2024-01-01T00:00:00Z"

# Service Account Configuration
serviceAccount:
  create: true
  annotations:
    # Add IRSA annotations for AWS if needed
    eks.amazonaws.com/role-arn: "arn:aws:iam::ACCOUNT-ID:role/argocd-role"

# Network Policies
networkPolicy:
  enabled: true
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: ingress-nginx
      ports:
        - protocol: TCP
          port: 80
        - protocol: TCP
          port: 443

# Pod Security Standards
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 999
  fsGroup: 999

# Container Security Context
containerSecurityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 999

# Prometheus Monitoring
prometheus:
  enabled: true
  serviceMonitor:
    enabled: true