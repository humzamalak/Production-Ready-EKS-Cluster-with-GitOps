# Vault SecretStore and ClusterSecretStore configurations for External Secrets Operator
# This replaces the AWS Secrets Manager configuration

---
# ClusterSecretStore for Vault - accessible across all namespaces
apiVersion: external-secrets.io/v1beta1
kind: ClusterSecretStore
metadata:
  name: vault-cluster-secret-store
spec:
  provider:
    vault:
      # Vault server URL
      server: "https://vault.vault.svc.cluster.local:8200"
      # Vault path (e.g., "secret" for KV v2 engine)
      path: "secret"
      # Vault version (v1 or v2)
      version: "v2"
      # Authentication method
      auth:
        # Kubernetes authentication
        kubernetes:
          # Mount path for Kubernetes auth
          mountPath: "kubernetes"
          # Role name for Kubernetes auth
          role: "external-secrets-operator"
          # Service account for authentication
          serviceAccountRef:
            name: external-secrets-sa
            namespace: external-secrets-system
      # TLS configuration
      caBundle: |
        -----BEGIN CERTIFICATE-----
        # Vault CA certificate will be injected here
        -----END CERTIFICATE-----
      # Skip TLS verification (only for development)
      skipTLSVerify: false

---
# Namespace-specific SecretStore for production
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-secret-store
  namespace: production
spec:
  provider:
    vault:
      server: "https://vault.vault.svc.cluster.local:8200"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "production-secrets-role"
          serviceAccountRef:
            name: production-vault-sa
            namespace: production
      caBundle: |
        -----BEGIN CERTIFICATE-----
        # Vault CA certificate will be injected here
        -----END CERTIFICATE-----
      skipTLSVerify: false

---
# Namespace-specific SecretStore for monitoring
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-secret-store
  namespace: monitoring
spec:
  provider:
    vault:
      server: "https://vault.vault.svc.cluster.local:8200"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "monitoring-secrets-role"
          serviceAccountRef:
            name: monitoring-vault-sa
            namespace: monitoring
      caBundle: |
        -----BEGIN CERTIFICATE-----
        # Vault CA certificate will be injected here
        -----END CERTIFICATE-----
      skipTLSVerify: false

---
# Namespace-specific SecretStore for staging
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-secret-store
  namespace: staging
spec:
  provider:
    vault:
      server: "https://vault.vault.svc.cluster.local:8200"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "staging-secrets-role"
          serviceAccountRef:
            name: staging-vault-sa
            namespace: staging
      caBundle: |
        -----BEGIN CERTIFICATE-----
        # Vault CA certificate will be injected here
        -----END CERTIFICATE-----
      skipTLSVerify: false

---
# Service Account for External Secrets Operator
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets-sa
  namespace: external-secrets-system
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::ACCOUNT_ID:role/external-secrets-vault-role"

---
# Service Account for production namespace
apiVersion: v1
kind: ServiceAccount
metadata:
  name: production-vault-sa
  namespace: production
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::ACCOUNT_ID:role/production-vault-role"

---
# Service Account for monitoring namespace
apiVersion: v1
kind: ServiceAccount
metadata:
  name: monitoring-vault-sa
  namespace: monitoring
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::ACCOUNT_ID:role/monitoring-vault-role"

---
# Service Account for staging namespace
apiVersion: v1
kind: ServiceAccount
metadata:
  name: staging-vault-sa
  namespace: staging
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::ACCOUNT_ID:role/staging-vault-role"

---
# RBAC for External Secrets Operator
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-secrets-vault-role
rules:
  - apiGroups: [""]
    resources: ["serviceaccounts"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: ["external-secrets.io"]
    resources: ["secretstores", "clustersecretstores", "externalsecrets"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

---
# ClusterRoleBinding for External Secrets Operator
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-secrets-vault-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-secrets-vault-role
subjects:
  - kind: ServiceAccount
    name: external-secrets-sa
    namespace: external-secrets-system

---
# RBAC for production namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: production-vault-role
  namespace: production
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: ["external-secrets.io"]
    resources: ["secretstores", "externalsecrets"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

---
# RoleBinding for production namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: production-vault-binding
  namespace: production
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: production-vault-role
subjects:
  - kind: ServiceAccount
    name: production-vault-sa
    namespace: production

---
# RBAC for monitoring namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: monitoring-vault-role
  namespace: monitoring
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: ["external-secrets.io"]
    resources: ["secretstores", "externalsecrets"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

---
# RoleBinding for monitoring namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: monitoring-vault-binding
  namespace: monitoring
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: monitoring-vault-role
subjects:
  - kind: ServiceAccount
    name: monitoring-vault-sa
    namespace: monitoring

---
# RBAC for staging namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: staging-vault-role
  namespace: staging
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: ["external-secrets.io"]
    resources: ["secretstores", "externalsecrets"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

---
# RoleBinding for staging namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: staging-vault-binding
  namespace: staging
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: staging-vault-role
subjects:
  - kind: ServiceAccount
    name: staging-vault-sa
    namespace: staging
