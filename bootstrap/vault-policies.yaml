# Vault Policies and Authentication Configuration
# This file contains the Vault policies and authentication setup for the External Secrets Operator

---
# Vault Policy for External Secrets Operator
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-policies
  namespace: vault
  labels:
    app: vault
    component: policies
data:
  # Policy for External Secrets Operator
  external-secrets-operator-policy.hcl: |
    # Allow read access to all secrets in the secret/ path
    path "secret/data/*" {
      capabilities = ["read"]
    }
    
    # Allow read access to secret metadata
    path "secret/metadata/*" {
      capabilities = ["read", "list"]
    }
    
    # Allow list access to secret paths
    path "secret/*" {
      capabilities = ["list"]
    }
    
    # Allow authentication via Kubernetes
    path "auth/kubernetes/login" {
      capabilities = ["create", "update"]
    }
    
    # Allow token renewal
    path "auth/token/renew-self" {
      capabilities = ["update"]
    }
    
    # Allow token lookup
    path "auth/token/lookup-self" {
      capabilities = ["read"]
    }

  # Policy for production namespace
  production-secrets-policy.hcl: |
    # Allow read access to production secrets
    path "secret/data/production/*" {
      capabilities = ["read"]
    }
    
    # Allow read access to production secret metadata
    path "secret/metadata/production/*" {
      capabilities = ["read", "list"]
    }
    
    # Allow list access to production secret paths
    path "secret/production/*" {
      capabilities = ["list"]
    }
    
    # Allow authentication via Kubernetes
    path "auth/kubernetes/login" {
      capabilities = ["create", "update"]
    }
    
    # Allow token renewal
    path "auth/token/renew-self" {
      capabilities = ["update"]
    }
    
    # Allow token lookup
    path "auth/token/lookup-self" {
      capabilities = ["read"]
    }

  # Policy for monitoring namespace
  monitoring-secrets-policy.hcl: |
    # Allow read access to monitoring secrets
    path "secret/data/monitoring/*" {
      capabilities = ["read"]
    }
    
    # Allow read access to monitoring secret metadata
    path "secret/metadata/monitoring/*" {
      capabilities = ["read", "list"]
    }
    
    # Allow list access to monitoring secret paths
    path "secret/monitoring/*" {
      capabilities = ["list"]
    }
    
    # Allow authentication via Kubernetes
    path "auth/kubernetes/login" {
      capabilities = ["create", "update"]
    }
    
    # Allow token renewal
    path "auth/token/renew-self" {
      capabilities = ["update"]
    }
    
    # Allow token lookup
    path "auth/token/lookup-self" {
      capabilities = ["read"]
    }

  # Policy for staging namespace
  staging-secrets-policy.hcl: |
    # Allow read access to staging secrets
    path "secret/data/staging/*" {
      capabilities = ["read"]
    }
    
    # Allow read access to staging secret metadata
    path "secret/metadata/staging/*" {
      capabilities = ["read", "list"]
    }
    
    # Allow list access to staging secret paths
    path "secret/staging/*" {
      capabilities = ["list"]
    }
    
    # Allow authentication via Kubernetes
    path "auth/kubernetes/login" {
      capabilities = ["create", "update"]
    }
    
    # Allow token renewal
    path "auth/token/renew-self" {
      capabilities = ["update"]
    }
    
    # Allow token lookup
    path "auth/token/lookup-self" {
      capabilities = ["read"]
    }

  # Policy for Vault administration
  vault-admin-policy.hcl: |
    # Full access to all paths (use with caution)
    path "*" {
      capabilities = ["create", "read", "update", "delete", "list", "sudo"]
    }

---
# Vault Kubernetes Auth Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-k8s-auth-config
  namespace: vault
  labels:
    app: vault
    component: auth
data:
  # Kubernetes auth configuration
  kubernetes-auth-config.hcl: |
    # Enable Kubernetes authentication
    auth "kubernetes" {
      type = "kubernetes"
      path = "kubernetes"
      
      # Kubernetes API server URL
      kubernetes_host = "https://kubernetes.default.svc.cluster.local"
      
      # Kubernetes CA certificate
      kubernetes_ca_cert = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
      
      # Token reviewer JWT
      token_reviewer_jwt = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      
      # Disable issuer validation (for development)
      disable_iss_validation = false
      
      # Disable local CA JWT validation
      disable_local_ca_jwt = false
    }

---
# Vault Secret Engine Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-secret-engine-config
  namespace: vault
  labels:
    app: vault
    component: secrets
data:
  # KV v2 secret engine configuration
  kv-v2-config.hcl: |
    # Enable KV v2 secret engine
    secrets "secret" {
      type = "kv"
      version = 2
      description = "KV v2 secrets engine for application secrets"
      
      # Configuration options
      options = {
        version = "2"
        max_versions = 10
        cas_required = false
        delete_version_after = "0s"
      }
    }

---
# Vault Initialization Script
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-init-script
  namespace: vault
  labels:
    app: vault
    component: init
data:
  init-vault.sh: |
    #!/bin/bash
    set -e
    
    echo "Initializing Vault..."
    
    # Wait for Vault to be ready
    until vault status; do
      echo "Waiting for Vault to be ready..."
      sleep 5
    done
    
    # Check if Vault is already initialized
    if vault status | grep -q "Initialized.*true"; then
      echo "Vault is already initialized"
      exit 0
    fi
    
    # Initialize Vault
    echo "Initializing Vault with 3 key shares and 2 key threshold..."
    vault operator init -key-shares=3 -key-threshold=2 -format=json > /tmp/vault-init.json
    
    # Extract unseal keys and root token
    UNSEAL_KEY_1=$(cat /tmp/vault-init.json | jq -r '.unseal_keys_b64[0]')
    UNSEAL_KEY_2=$(cat /tmp/vault-init.json | jq -r '.unseal_keys_b64[1]')
    UNSEAL_KEY_3=$(cat /tmp/vault-init.json | jq -r '.unseal_keys_b64[2]')
    ROOT_TOKEN=$(cat /tmp/vault-init.json | jq -r '.root_token')
    
    # Unseal Vault
    echo "Unsealing Vault..."
    vault operator unseal $UNSEAL_KEY_1
    vault operator unseal $UNSEAL_KEY_2
    vault operator unseal $UNSEAL_KEY_3
    
    # Login with root token
    vault auth $ROOT_TOKEN
    
    # Enable KV v2 secret engine
    echo "Enabling KV v2 secret engine..."
    vault secrets enable -path=secret kv-v2
    
    # Enable Kubernetes authentication
    echo "Enabling Kubernetes authentication..."
    vault auth enable kubernetes
    
    # Configure Kubernetes authentication
    echo "Configuring Kubernetes authentication..."
    vault write auth/kubernetes/config \
      kubernetes_host="https://kubernetes.default.svc.cluster.local" \
      kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
      token_reviewer_jwt=@/var/run/secrets/kubernetes.io/serviceaccount/token
    
    # Create policies
    echo "Creating Vault policies..."
    vault policy write external-secrets-operator /vault/config/policies/external-secrets-operator-policy.hcl
    vault policy write production-secrets /vault/config/policies/production-secrets-policy.hcl
    vault policy write monitoring-secrets /vault/config/policies/monitoring-secrets-policy.hcl
    vault policy write staging-secrets /vault/config/policies/staging-secrets-policy.hcl
    vault policy write vault-admin /vault/config/policies/vault-admin-policy.hcl
    
    # Create Kubernetes roles
    echo "Creating Kubernetes roles..."
    
    # Role for External Secrets Operator
    vault write auth/kubernetes/role/external-secrets-operator \
      bound_service_account_names=external-secrets-sa \
      bound_service_account_namespaces=external-secrets-system \
      policies=external-secrets-operator \
      ttl=1h
    
    # Role for production namespace
    vault write auth/kubernetes/role/production-secrets-role \
      bound_service_account_names=production-vault-sa \
      bound_service_account_namespaces=production \
      policies=production-secrets \
      ttl=1h
    
    # Role for monitoring namespace
    vault write auth/kubernetes/role/monitoring-secrets-role \
      bound_service_account_names=monitoring-vault-sa \
      bound_service_account_namespaces=monitoring \
      policies=monitoring-secrets \
      ttl=1h
    
    # Role for staging namespace
    vault write auth/kubernetes/role/staging-secrets-role \
      bound_service_account_names=staging-vault-sa \
      bound_service_account_namespaces=staging \
      policies=staging-secrets \
      ttl=1h
    
    # Create sample secrets
    echo "Creating sample secrets..."
    
    # Production database secret
    vault kv put secret/production/db \
      username="prod_user" \
      password="prod_password_123" \
      host="prod-db.example.com" \
      port="5432"
    
    # Monitoring Grafana secret
    vault kv put secret/monitoring/grafana \
      admin-user="admin" \
      admin-password="grafana_admin_123"
    
    # Staging database secret
    vault kv put secret/staging/db \
      username="staging_user" \
      password="staging_password_123" \
      host="staging-db.example.com" \
      port="5432"
    
    echo "Vault initialization completed successfully!"
    echo "Root token: $ROOT_TOKEN"
    echo "Unseal keys: $UNSEAL_KEY_1, $UNSEAL_KEY_2, $UNSEAL_KEY_3"
    echo "Please save these credentials securely!"

---
# Vault Unseal Job
apiVersion: batch/v1
kind: Job
metadata:
  name: vault-unseal
  namespace: vault
  labels:
    app: vault
    component: unseal
spec:
  template:
    metadata:
      labels:
        app: vault
        component: unseal
    spec:
      serviceAccountName: vault
      containers:
      - name: vault-unseal
        image: hashicorp/vault:1.16.1
        command:
        - /bin/bash
        - -c
        - |
          # Wait for Vault to be ready
          until vault status; do
            echo "Waiting for Vault to be ready..."
            sleep 5
          done
          
          # Check if Vault is already unsealed
          if vault status | grep -q "Sealed.*false"; then
            echo "Vault is already unsealed"
            exit 0
          fi
          
          # Unseal Vault (in production, use separate unseal keys)
          echo "Unsealing Vault..."
          # Note: In production, these keys should be stored securely and not in the job
          # This is for demonstration purposes only
          vault operator unseal $VAULT_UNSEAL_KEY_1
          vault operator unseal $VAULT_UNSEAL_KEY_2
          vault operator unseal $VAULT_UNSEAL_KEY_3
        env:
        - name: VAULT_ADDR
          value: "https://vault.vault.svc.cluster.local:8200"
        - name: VAULT_CACERT
          value: "/vault/tls/ca.crt"
        - name: VAULT_UNSEAL_KEY_1
          valueFrom:
            secretKeyRef:
              name: vault-unseal-keys
              key: unseal-key-1
        - name: VAULT_UNSEAL_KEY_2
          valueFrom:
            secretKeyRef:
              name: vault-unseal-keys
              key: unseal-key-2
        - name: VAULT_UNSEAL_KEY_3
          valueFrom:
            secretKeyRef:
              name: vault-unseal-keys
              key: unseal-key-3
        volumeMounts:
        - name: vault-tls
          mountPath: /vault/tls
          readOnly: true
      volumes:
      - name: vault-tls
        secret:
          secretName: vault-tls
      restartPolicy: OnFailure
  backoffLimit: 3

---
# Vault Unseal Keys Secret (for demonstration - in production, use external key management)
apiVersion: v1
kind: Secret
metadata:
  name: vault-unseal-keys
  namespace: vault
  labels:
    app: vault
    component: unseal
type: Opaque
data:
  # Base64 encoded unseal keys (replace with actual keys)
  unseal-key-1: dW5zZWFsLWtleS0x # unseal-key-1
  unseal-key-2: dW5zZWFsLWtleS0y # unseal-key-2
  unseal-key-3: dW5zZWFsLWtleS0z # unseal-key-3
