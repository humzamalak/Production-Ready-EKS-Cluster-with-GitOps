# Vault Helm Chart Values Configuration
# Production-ready configuration with HA, Raft storage, and security best practices
# 
# IMPORTANT: Before deploying to production, update the following:
# 1. Replace 'your-domain.com' with your actual domain
# 2. Replace 'ACCOUNT_ID' with your AWS account ID
# 3. Ensure TLS certificates are properly configured
# 4. Configure proper backup strategies

global:
  enabled: true
  tlsDisable: false
  tlsDisableAuto: false
  tlsDisableRedirect: false
  externalVaultAddr: "https://vault.your-domain.com"

server:
  enabled: true
  image:
    repository: "hashicorp/vault"
    tag: "1.16.1"
  
  # High availability configuration with Raft storage
  ha:
    enabled: true
    replicas: 3
    raft:
      enabled: true
      setNodeId: true
      config: |
        ui = true
        
        listener "tcp" {
          address = "[::]:8200"
          cluster_address = "[::]:8201"
          tls_disable = false
          tls_cert_file = "/vault/tls/tls.crt"
          tls_key_file = "/vault/tls/tls.key"
        }
        
        storage "raft" {
          path = "/vault/data"
        }
        
        service_registration "kubernetes" {}
        
        # Enable audit logging
        audit_device "file" {
          path = "/vault/audit/audit.log"
        }
  
  # Security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 100
    runAsGroup: 1000
    fsGroup: 1000
  
  # Resource limits
  resources:
    requests:
      memory: "512Mi"
      cpu: "500m"
    limits:
      memory: "1Gi"
      cpu: "1000m"
  
  # Service configuration
  service:
    enabled: true
    type: ClusterIP
    port: 8200
    targetPort: 8200
  
  # Ingress configuration
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    hosts:
      - host: vault.your-domain.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: vault-tls
        hosts:
          - vault.your-domain.com
  
  # TLS configuration
  extraEnvironmentVars:
    VAULT_CACERT: /vault/tls/ca.crt
    VAULT_CAPATH: /vault/tls
  
  # Volume mounts for TLS certificates
  extraVolumes:
    - type: secret
      name: vault-tls
  
  extraVolumeMounts:
    - name: vault-tls
      mountPath: /vault/tls
      readOnly: true
  
  # Service account
  serviceAccount:
    create: true
    name: vault
    annotations:
      eks.amazonaws.com/role-arn: "arn:aws:iam::ACCOUNT_ID:role/vault-role"
      # Additional annotations for other cloud providers
      # azure.workload.identity/client-id: "your-client-id"  # For Azure
      # gcp.workload.identity/service-account: "vault@project.iam.gserviceaccount.com"  # For GCP

# Vault Agent Injector
injector:
  enabled: false
  image:
    repository: "hashicorp/vault-k8s"
    tag: "1.1.0"
  
  # Default settings for injected Vault agents
  agentDefaults:
    cpuLimit: "200m"
    cpuRequest: "100m"
    memLimit: "256Mi"
    memRequest: "128Mi"
  
  # Pod-level security context for Pod Security Standards compliance
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 100
    runAsGroup: 1000
    fsGroup: 1000
    seccompProfile:
      type: RuntimeDefault
  
  # Container-level security context
  securityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 100
    runAsGroup: 1000
    seccompProfile:
      type: RuntimeDefault
    capabilities:
      drop:
        - ALL
  
  # Resource limits
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "200m"
  
  # Service account
  serviceAccount:
    create: true
    name: vault-agent-injector
    annotations:
      eks.amazonaws.com/role-arn: "arn:aws:iam::ACCOUNT_ID:role/vault-agent-injector-role"

# Vault UI
ui:
  enabled: true
  serviceType: ClusterIP
  serviceNodePort: null
  externalPort: 8200
  
  # Resource limits
  resources:
    requests:
      memory: "64Mi"
      cpu: "50m"
    limits:
      memory: "128Mi"
      cpu: "100m"

# Vault CSI Driver
csi:
  enabled: true
  image:
    repository: "hashicorp/vault-csi-provider"
    tag: "1.4.0"
  
  # Resource limits
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "200m"
  
  # Service account
  serviceAccount:
    create: true
    name: vault-csi-provider
    annotations:
      eks.amazonaws.com/role-arn: "arn:aws:iam::ACCOUNT_ID:role/vault-csi-provider-role"

# Prometheus monitoring
prometheus:
  enabled: true
  serviceMonitor:
    enabled: true
    namespace: monitoring
    interval: 30s
    scrapeTimeout: 10s
    labels:
      app: vault
    metricRelabelings:
      - sourceLabels: [__name__]
        regex: 'vault_audit_.*'
        action: drop
  
  # Resource limits
  resources:
    requests:
      memory: "64Mi"
      cpu: "50m"
    limits:
      memory: "128Mi"
      cpu: "100m"

# Network policies
networkPolicy:
  enabled: true
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: argocd
        - namespaceSelector:
            matchLabels:
              name: external-secrets-system
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 8200
        - protocol: TCP
          port: 8201

# Pod security policy
podSecurityPolicy:
  enabled: true
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'runtime/default'
    apparmor.security.beta.kubernetes.io/allowedProfileNames: 'runtime/default'
    seccomp.security.alpha.kubernetes.io/defaultProfileName: 'runtime/default'
    apparmor.security.beta.kubernetes.io/defaultProfileName: 'runtime/default'

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 2

# Autoscaling
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 5
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
