# Grafana Staging Values
# Optimized for staging with reduced resources and staging-specific configuration

# Admin configuration
admin:
  existingSecret: grafana-admin-staging
  userKey: admin-user
  passwordKey: admin-password

# Persistence configuration (smaller for staging)
persistence:
  enabled: true
  type: pvc
  storageClassName: standard
  accessModes:
    - ReadWriteOnce
  size: 5Gi

# Resource limits (reduced for staging)
resources:
  requests:
    cpu: 50m
    memory: 128Mi
  limits:
    cpu: 100m
    memory: 256Mi

# Service configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 3000

# Ingress configuration for staging
ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-staging"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
  hosts:
    - grafana-staging.your-domain.com
  tls:
    - secretName: grafana-staging-tls
      hosts:
        - grafana-staging.your-domain.com

# Grafana configuration for staging
grafana.ini:
  server:
    root_url: https://grafana-staging.your-domain.com
  security:
    disable_gravatar: true
    allow_embedding: true
  auth:
    disable_login_form: false
  auth.anonymous:
    enabled: false
  log:
    level: debug  # More verbose logging for staging
    mode: console
  metrics:
    enabled: true

# Datasources configuration for staging
datasources:
  datasources.yaml:
    apiVersion: 1
    datasources:
      - name: Prometheus Staging
        type: prometheus
        url: http://prometheus-staging-server.staging-monitoring.svc.cluster.local:80
        access: proxy
        isDefault: true
        editable: true
        jsonData:
          timeInterval: "5s"
          queryTimeout: "60s"
          httpMethod: "POST"
      - name: AlertManager Staging
        type: alertmanager
        url: http://prometheus-staging-alertmanager.staging-monitoring.svc.cluster.local:9093
        access: proxy
        editable: true
        jsonData:
          implementation: "prometheus"

# Dashboard providers
dashboardProviders:
  dashboardproviders.yaml:
    apiVersion: 1
    providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/default

# Dashboards (same as production but for staging environment)
dashboards:
  default:
    kubernetes-cluster-monitoring-staging:
      gnetId: 7249
      revision: 1
      datasource: Prometheus Staging
    node-exporter-staging:
      gnetId: 1860
      revision: 27
      datasource: Prometheus Staging

# ServiceMonitor for Prometheus scraping
serviceMonitor:
  enabled: true
  namespace: staging-monitoring
  labels:
    app: grafana-staging
  interval: 30s
  scrapeTimeout: 10s

# Security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 472
  runAsGroup: 472
  fsGroup: 472

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 472

# Network policy for staging
networkPolicy:
  enabled: true
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: staging-monitoring
        - namespaceSelector:
            matchLabels:
              name: argocd
      ports:
        - protocol: TCP
          port: 3000

# Pod disruption budget (relaxed for staging)
podDisruptionBudget:
  enabled: false  # Disabled for staging to allow easier testing
