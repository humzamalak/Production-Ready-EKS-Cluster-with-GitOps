# ArgoCD Application for Grafana Deployment
# Separate Grafana instance for custom dashboards and external access
# This application deploys a standalone Grafana with pre-configured datasources and dashboards
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: grafana
  namespace: argocd
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: monitoring-stack
    app.kubernetes.io/version: "7.3.7"
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: default
  source:
    repoURL: 'https://grafana.github.io/helm-charts'
    chart: grafana
    targetRevision: 7.3.7
    helm:
      values: |
        # Grafana configuration
        # External secrets integration (recommended for production)
        admin:
          existingSecret: grafana-admin
          userKey: admin-user
          passwordKey: admin-password

        # Persistence
        persistence:
          enabled: true
          type: pvc
          storageClassName: standard
          accessModes:
            - ReadWriteOnce
          size: 10Gi

        # Resources
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 250m
            memory: 512Mi

        # Service configuration
        service:
          type: ClusterIP
          port: 80
          targetPort: 3000

        # Ingress configuration
        ingress:
          enabled: true
          className: "nginx"
          annotations:
            cert-manager.io/cluster-issuer: "letsencrypt-prod"
            nginx.ingress.kubernetes.io/ssl-redirect: "true"
            nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
          hosts:
            - host: grafana.your-domain.com
              paths:
                - path: /
                  pathType: Prefix
          tls:
            - secretName: grafana-tls
              hosts:
                - grafana.your-domain.com

        # Grafana configuration
        grafana.ini:
          server:
            root_url: https://grafana.your-domain.com
          security:
            disable_gravatar: true
            allow_embedding: true
          auth:
            disable_login_form: false
          auth.anonymous:
            enabled: false
          log:
            level: info
            mode: console
          metrics:
            enabled: true

        # Datasources configuration
        datasources:
          datasources.yaml:
            apiVersion: 1
            datasources:
              - name: Prometheus
                type: prometheus
                url: http://prometheus-kube-prometheus-stack-prometheus.monitoring.svc.cluster.local:9090
                access: proxy
                isDefault: true
                editable: true
                jsonData:
                  timeInterval: "5s"
                  queryTimeout: "60s"
                  httpMethod: "POST"
              - name: AlertManager
                type: alertmanager
                url: http://prometheus-kube-prometheus-stack-alertmanager.monitoring.svc.cluster.local:9093
                access: proxy
                editable: true
                jsonData:
                  implementation: "prometheus"

        # Dashboard providers
        dashboardProviders:
          dashboardproviders.yaml:
            apiVersion: 1
            providers:
              - name: 'default'
                orgId: 1
                folder: ''
                type: file
                disableDeletion: false
                editable: true
                options:
                  path: /var/lib/grafana/dashboards/default

        # Dashboards
        dashboards:
          default:
            kubernetes-cluster-monitoring:
              gnetId: 7249
              revision: 1
              datasource: Prometheus
            node-exporter:
              gnetId: 1860
              revision: 27
              datasource: Prometheus
            kubernetes-pods:
              gnetId: 6417
              revision: 1
              datasource: Prometheus
            kubernetes-deployment:
              gnetId: 8588
              revision: 1
              datasource: Prometheus
            alertmanager:
              gnetId: 9578
              revision: 1
              datasource: AlertManager

        # ServiceMonitor for Prometheus scraping
        serviceMonitor:
          enabled: true
          namespace: monitoring
          labels:
            app: grafana
          interval: 30s
          scrapeTimeout: 10s

        # Pod security context
        podSecurityContext:
          runAsNonRoot: true
          runAsUser: 472
          runAsGroup: 472
          fsGroup: 472

        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 472

        # Network policy
        networkPolicy:
          enabled: true
          ingress:
            - from:
                - namespaceSelector:
                    matchLabels:
                      name: monitoring
                - namespaceSelector:
                    matchLabels:
                      name: argocd
              ports:
                - protocol: TCP
                  port: 3000

        # Pod disruption budget
        podDisruptionBudget:
          enabled: true
          minAvailable: 1
  destination:
    server: https://kubernetes.default.svc
    namespace: monitoring
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ApplyOutOfSyncOnly=true
      - PrunePropagationPolicy=foreground
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m

