apiVersion: apps/v1
# Kubernetes v1.33.0: verified fields; probes/resources required by repo policies
kind: Deployment
metadata:
  name: {{ include "k8s-web-app.fullname" . }}
  labels:
    {{- include "k8s-web-app.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "k8s-web-app.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- if or .Values.podAnnotations .Values.vault.enabled }}
      annotations:
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- if and .Values.vault.enabled .Values.vault.ready }}
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/role: {{ .Values.vault.role }}
        vault.hashicorp.com/agent-inject-secret-db: "secret/data/production/web-app/db"
        vault.hashicorp.com/agent-inject-template-db: |
          {{- range .Values.vault.secrets -}}
          {{- if eq .secretPath "secret/data/production/web-app/db" -}}
          {{- .template | nindent 10 }}
          {{- end -}}
          {{- end }}
        vault.hashicorp.com/agent-inject-secret-api: "secret/data/production/web-app/api"
        vault.hashicorp.com/agent-inject-template-api: |
          {{- range .Values.vault.secrets -}}
          {{- if eq .secretPath "secret/data/production/web-app/api" -}}
          {{- .template | nindent 10 }}
          {{- end -}}
          {{- end }}
        vault.hashicorp.com/agent-inject-secret-external: "secret/data/production/web-app/external"
        vault.hashicorp.com/agent-inject-template-external: |
          {{- range .Values.vault.secrets -}}
          {{- if eq .secretPath "secret/data/production/web-app/external" -}}
          {{- .template | nindent 10 }}
          {{- end -}}
          {{- end }}
        vault.hashicorp.com/agent-pre-populate-only: "true"
        vault.hashicorp.com/agent-inject-status: "update"
        {{- end }}
      {{- end }}
      labels:
        {{- include "k8s-web-app.selectorLabels" . | nindent 8 }}
    spec:
      {{- if and .Values.vault.enabled .Values.vault.ready }}
      initContainers:
      - name: vault-wait
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          echo "Waiting for Vault to be ready..."
          until nc -z vault.vault.svc.cluster.local 8200; do
            echo "Vault not ready, waiting..."
            sleep 5
          done
          echo "Vault is ready!"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          seccompProfile:
            type: RuntimeDefault
        resources:
          requests:
            cpu: 10m
            memory: 16Mi
          limits:
            cpu: 50m
            memory: 32Mi
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if and .Values.vault.enabled .Values.vault.ready }}
      serviceAccountName: {{ include "k8s-web-app.fullname" . }}-vault-sa
      {{- else }}
      serviceAccountName: {{ include "k8s-web-app.serviceAccountName" . }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          env:
            {{- range $key, $value := .Values.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- if .Values.vault.enabled }}
            # Load environment variables from Vault-injected secrets
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: vault-secret-db
                  key: DB_HOST
            - name: DB_PORT
              valueFrom:
                secretKeyRef:
                  name: vault-secret-db
                  key: DB_PORT
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: vault-secret-db
                  key: DB_NAME
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: vault-secret-db
                  key: DB_USERNAME
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: vault-secret-db
                  key: DB_PASSWORD
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: vault-secret-api
                  key: JWT_SECRET
            - name: ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: vault-secret-api
                  key: ENCRYPTION_KEY
            - name: API_KEY
              valueFrom:
                secretKeyRef:
                  name: vault-secret-api
                  key: API_KEY
            - name: SMTP_HOST
              valueFrom:
                secretKeyRef:
                  name: vault-secret-external
                  key: SMTP_HOST
            - name: SMTP_PORT
              valueFrom:
                secretKeyRef:
                  name: vault-secret-external
                  key: SMTP_PORT
            - name: SMTP_USERNAME
              valueFrom:
                secretKeyRef:
                  name: vault-secret-external
                  key: SMTP_USERNAME
            - name: SMTP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: vault-secret-external
                  key: SMTP_PASSWORD
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: vault-secret-external
                  key: REDIS_URL
            {{- else if .Values.secretRefs }}
            # Legacy Kubernetes secret references
            {{- range .Values.secretRefs }}
            {{- $secretName := .name }}
            {{- range .keys }}
            - name: {{ .envVar }}
              valueFrom:
                secretKeyRef:
                  name: {{ $secretName }}
                  key: {{ .key }}
            {{- end }}
            {{- end }}
            {{- end }}
          livenessProbe:
            {{- toYaml .Values.healthCheck.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.healthCheck.readinessProbe | nindent 12 }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- with .Values.nodeSelector }}
          nodeSelector:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.affinity }}
          affinity:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.tolerations }}
          tolerations:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
